if not modules then modules = { } end modules ['lpdf-fix'] = {
    version   = 1.001,
    comment   = "companion to lpdf-ini.mkiv",
    author    = "Hans Hagen, PRAGMA-ADE, Hasselt NL",
    copyright = "PRAGMA ADE / ConTeXt Development Team",
    license   = "see context related readme files"
}

-- todo: keep table representation

-- local everything = {
--     embed = {
--         type0    = true,
--         truetype = true,
--         type1    = true,
--     },
--     merge = {
--         type0    = true, -- check if a..z A..Z 0..9
--         truetype = true,
--         type1    = true,
--         type3    = true,
--         LMTX     = true,
--     },
--     strip = {
--         transparency = true, -- when zero
--         extgstate    = true,
--         cmyk         = true,
--         marked       = true,
--     },
--     add = {
--         cidset, -- when missing or even fix
--     },
-- }

-- local report = logs.reporter("graphics","compactors")

do

    local pdfbackend        = backends.registered.pdf
    local codeinjections    = pdfbackend.codeinjections
    local setmetatableindex = table.setmetatableindex

    local compactors = {
     -- [interfaces.variables.no]   = false,
     -- [interfaces.variables.nono] = false,
     -- [""]             = false,
    }

    local function registercompactor(name,data)
        if not data then
            data = name
            name = data.name
            data.name = nil
        end
        -- we play safe:
        local strip = data.strip
        if not strip then
            data.strip = { marked = true }
        elseif strip.marked == nil then
            strip.marked = true
        end
        if not data.cleanup then
            data.cleanup = { }
        end
        if not data.merge then
            data.merge = { }
        end
        if not data.embed then
            data.embed = { }
        end
        -- and are done:
        compactors[name] = setmetatableindex(data,"table")
    end

    codeinjections.registercompactor = registercompactor

    function codeinjections.validcompactor(name)
        local compactor = name and compactors[name] or false
-- print("compactor",name,tostring(compactor))
        return compactor
    end

    registercompactor ( "preset:default", {
        strip = {
            marked    = true,
            procset   = true,
            pieceinfo = true,
        },
        cleanup = {
            procset   = true,
            pieceinfo = true,
        }
    } )

    registercompactor ( "preset:yes", {
        merge = {
            lmtx = true,
        },
        strip = {
            marked    = true,
        },
        cleanup = {
            procset   = true,
            pieceinfo = true,
        }
    } )

    registercompactor ( "preset:merge", {
        merge = {
            type0    = true,
            truetype = true,
            type1    = true,
         -- type3    = true,
            lmtx     = true,
        },
        strip = {
            marked    = true,
        },
        cleanup = {
            procset   = true,
            pieceinfo = true,
        }
    } )

    compactors[interfaces.variables.yes] = compactors["preset:yes"]

    function graphics.registerpdfcompactor(...)
        -- todo: message
        registercompactor(...)
    end

end

do

    local sequencers  = utilities.sequencers
    local appendgroup = sequencers.appendgroup

    local pdfcontentmanipulators = sequencers.new {
        name      = "pdfcontentmanipulators",
        arguments = "pdfdoc,page,pagenumber,resources,compactor",
    }

    appendgroup(pdfcontentmanipulators,"before") -- user
    appendgroup(pdfcontentmanipulators,"system") -- private
    appendgroup(pdfcontentmanipulators,"after" ) -- user

    function lpdf.epdf.contentplugin(pdfdoc,page,pagenumber,resources,compactor)
        local runner = pdfcontentmanipulators.runner
        if runner then
            runner(pdfdoc,page,pagenumber,resources,compactor)
        end
    end

    -- todo: contents: table first time, concat last time .. automatic .. when
    -- performance becomes an issue

    local pdfpagemanipulators = sequencers.new {
        name      = "pdfpagemanipulators",
        arguments = "pdfdoc,page,pagenumber,resources,compactor",
    }

    appendgroup(pdfpagemanipulators,"before") -- user
    appendgroup(pdfpagemanipulators,"system") -- private
    appendgroup(pdfpagemanipulators,"after" ) -- user

    sequencers.appendaction("pdfpagemanipulators","system","lpdf.epdf.contentplugin")
    sequencers.enableaction("pdfpagemanipulators","lpdf.epdf.contentplugin")

    function lpdf.epdf.pageplugin(pdfdoc,page,pagenumber,resources,compactor)
        local runner = pdfpagemanipulators.runner
        if runner then
-- inspect(pdfdoc.Info)
-- inspect(pdfdoc.Info)
            runner(pdfdoc,page,pagenumber,resources,compactor)
        end
    end

end
